# -*- coding: utf-8 -*-
"""CTF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/146GvGxfk1CX14utohjsiFlGYUqtTooaF

**‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô**


---
1.  CTF ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ 2 ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏≠ Normal ‡∏Å‡∏±‡∏ö Hard ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ Click Link ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
- Normal Mode: https://drive.google.com/file/d/1dLPJGikGIi6ZQiwtgXcAFNu6K1nSxGpY/view?usp=sharing
- Hard Mode: https://drive.google.com/file/d/1Sa8UxbRKq8z8xTrTVeSjN9C_RjIYs1B-/view?usp=sharing
2. ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏±‡∏ô Key ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÉ‡∏ô 3 Key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ ‡πÄ‡∏≠‡∏≤‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
- > ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì Run ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ install ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô
"""

!pip install -q pycryptodome
!pip install -q ipywidgets
from IPython.display import clear_output
clear_output()

"""**‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏£‡∏Å**


---


"""

# @title
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from getpass import getpass  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
def decrypt_aes(ciphertext_b64, key_decimal):
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á Key ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô bytes
        key = key_decimal.to_bytes(16, byteorder='big')  # 16 bytes

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Base64
        ciphertext = base64.b64decode(ciphertext_b64)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AES ECB Mode
        cipher = AES.new(key, AES.MODE_ECB)

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞ Unpad
        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode('utf-8')
    except Exception:
        return None

# Ciphertext (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
ciphertext_key = "GJtzUwnlC1Olxgc2wMtYNw=="

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
while True:
    try:
        # ‡πÉ‡∏ä‡πâ getpass ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™
        key_decimal = int(getpass("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Key (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 24 ‡∏ï‡∏±‡∏ß): "))

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
        result = decrypt_aes(ciphertext_key, key_decimal)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if result == "Correct":
            print(f"‚úîÔ∏è Keyword ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            break
        else:
            print("‚ùå Keyword ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    except ValueError:
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Key ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

"""**‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≠‡∏á**


---


"""

# @title
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from getpass import getpass  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
def decrypt_aes(ciphertext_b64, key_decimal):
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á Key ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô bytes
        key = key_decimal.to_bytes(16, byteorder='big')  # 16 bytes

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Base64
        ciphertext = base64.b64decode(ciphertext_b64)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AES ECB Mode
        cipher = AES.new(key, AES.MODE_ECB)

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞ Unpad
        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode('utf-8')
    except Exception:
        return None


ciphertext_key = "X/2rO+V8etpXLWcuxhDWPA=="

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
while True:
    try:
        # ‡πÉ‡∏ä‡πâ getpass ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™
        key_decimal = int(getpass("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Key (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 6 ‡∏ï‡∏±‡∏ß): "))

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
        result = decrypt_aes(ciphertext_key, key_decimal)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if result == "Correct":
            print(f"‚úîÔ∏è Keyword ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            break
        else:
            print("‚ùå Keyword ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    except ValueError:
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Key ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

"""**‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö key ‡∏≠‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢**


---


"""

# @title
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from ipywidgets import widgets, VBox, HBox
from IPython.display import display, clear_output, Javascript

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
def decrypt_aes(ciphertext_b64, key_input):
    try:
        ciphertext = base64.b64decode(ciphertext_b64)

        # ‡πÉ‡∏ä‡πâ AES.MODE_ECB ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ IV
        cipher = AES.new(key_input, AES.MODE_ECB)
        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode('utf-8')
    except Exception:
        return None

# Ciphertext ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (Base64)
ciphertext_key = "/E4lVPYMz8oFokK+HtEZQw=="
check_answer = "ngCgwwswcjcivTrAf5bvOQ=="

# widgets ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã
key_input_widget = widgets.Password(description="üîë Key:", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 32 ‡∏ï‡∏±‡∏ß (‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 2)")
check_button = widgets.Button(description="üöÄ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", button_style='success')
output_area = widgets.Output()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Key
def check_key(b):
    with output_area:
        clear_output()
        key_input = key_input_widget.value.encode('utf-8')
        result1 = decrypt_aes(ciphertext_key, key_input)
        result2 = decrypt_aes(check_answer, key_input)

        if result2 == "Correct":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô popup ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            display(Javascript(f'alert("üéâ‚ú® ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‚ú®üéâ \\nüìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ -> {result1}")'))
            check_button.disabled = True  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        else:
            print("         ‚ùå Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üòî ‡∏•‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
check_button.on_click(check_key)

# ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã
display(VBox([HBox([key_input_widget, check_button]), output_area]))